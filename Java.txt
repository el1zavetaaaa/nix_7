Yelyzaveta.Lubenets@sgt.khpi.edu.ua -----> Почта IDEA

9Jtd%H!S;_$R@xe -------> Пароль IDEA


  private Author[] authors;
    private Book[] books;
    private int ATHOUR_BOOK_SIZE = authors.length + books.length;
    private AuthorBook[] authorbook = new AuthorBook[ATHOUR_BOOK_SIZE];
    int authorslength = authors.length;
    int bookslength = books.length;
    int a = 1;


    public InMemoryAuthorBookDao() {
    }

    public AuthorBook[] create(Author[] authors, Book[] books) {
        for (int i = 0; i < authorslength; i++) {

            authorbook[i].equals(authors[i]);
        }
        for (int i = 0; i < bookslength; i++) {
            authorbook[authorslength - 1 + a].equals(books[i]);
            a++;
        }

        int authorbooklength = authorbook.length;
        Object finalauthorbook[] = new Object[authorbooklength];
        for (int i = 0; i < authorbooklength; i++) {
            for (int j = i + 1; j < authorbooklength; j++) {
                if (!authorbook[i].equals(authorbook[j])) {
                    finalauthorbook[i].equals(authorbook[i]);
                    authorbook[i].equals(authorbook[j]);
                    authorbook[j].equals(finalauthorbook[i]);
                }
            }
        } return authorbook;
    }

    public AuthorBook[] delete(Author[] authors, Book[] books, Author author, Book book) {
        for (int i = 0; i < authors.length; i++) {
            author = ArrayUtils.get(authors, i);
            for (int j = 0; j < authors.length; j++) {
                book = ArrayUtils.get(books, i);

                if (books[j].equals(authors[i])) {
                    ArrayUtils.removeElement(books, book);
                    ArrayUtils.removeElement(authors, author);
                    i--;
                }
            }

        }
        return authorbook;
    }

    public AuthorBook[] findAllAuthorBook() {
        return authorbook;
    }


    @BeforeAll
    static void setUp() {
        for (int i = 0; i < USERS_SIZE; i++) {
            Author author1 = new Author();
            author1.setFirstname("test author " + i);
            author1.setLastname("test author " + i);
            Author author2 = new Author();
            author2.setFirstname("test author " + i);
            author2.setLastname("test author " + i);
            Author author3 = new Author();
            author3.setFirstname("test author " + i);
            author3.setLastname("test author " + i);
            Author[] authors = {author1, author2, author3};
            Book book = new Book();
            book.setName("test book " + i);
            authorBookService.createBookAuthors(book, authors);
        }
        Assertions.assertEquals(USERS_SIZE + 2, authorBookService.findAllAuthorsBooks().length);
    }

